// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(cuid())
  externalId   String  @unique
  username     String? @unique
  email        String? @unique
  firstName    String?
  lastName     String?
  imageUrl     String?
  timezone     String?
  currency     String?
  weekStartsOn Int     @default(1) // 0 is Sunday, 1 is Monday

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Group               Group[] // the groups the user created
  UserGroup           UsersGroups[] // the groups the user is part of
  PersonalTransaction PersonalTransaction[]
  SharedTransaction   SharedTransaction[]
  TransactionSplit    TransactionSplit[]
  Tag                 Tag[] // the tags the user created
  Category            Category[]

  SentFriendRequests     FriendRequest[] @relation("FromUser")
  ReceivedFriendRequests FriendRequest[] @relation("ToUser")

  @@map("users")
}

model Group {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy         User                @relation(fields: [createdById], references: [id])
  createdById       String
  UserGroup         UsersGroups[]
  SharedTransaction SharedTransaction[]

  @@index([name])
  @@map("groups")
}

model UsersGroups {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId String

  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
  @@map("users_groups")
}

enum TransactionType {
  INCOME
  EXPENSE
}

model PersonalTransaction {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transactionId String      @unique

  @@index([userId])
  @@map("personal_transactions")
}

model SharedTransaction {
  id String @id @default(cuid())

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId String

  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transactionId String      @unique

  TransactionSplit TransactionSplit[]

  @@index([createdById])
  @@index([groupId])
  @@map("shared_transactions")
}

model Transaction {
  id          String          @id @default(cuid())
  description String
  amount      Int // amount in cents
  date        DateTime
  type        TransactionType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  categoryId String?

  PersonalTransaction PersonalTransaction?
  SharedTransaction   SharedTransaction?
  TransactionsTags    TransactionsTags[]

  @@index([description])
  @@index([date])
  @@map("transactions")
}

model TransactionSplit {
  id        String   @id @default(cuid())
  amount    Int // amount in cents
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  SharedTransaction   SharedTransaction @relation(fields: [sharedTransactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sharedTransactionId String

  @@unique([sharedTransactionId, userId])
  @@index([sharedTransactionId])
  @@index([userId])
  @@index([date])
  @@map("transaction_splits")
}

model TransactionsTags {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transactionId String

  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId String

  @@unique([transactionId, tagId])
  @@map("transactions_tags")
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdById String

  TransactionsTags TransactionsTags[]

  @@unique([createdById, name])
  @@index([name])
  @@index([createdById])
  @@map("tags")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdById String

  Transaction Transaction[]

  @@unique([createdById, name])
  @@index([createdById])
  @@index([name])
  @@map("categories")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FriendRequest {
  id        String              @id @default(cuid())
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  fromUser   User   @relation("FromUser", fields: [fromUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fromUserId String

  toUser   User   @relation("ToUser", fields: [toUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  toUserId String

  @@unique([fromUserId, toUserId])
  @@map("friend_requests")
}
