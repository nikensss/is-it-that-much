// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  externalId String   @unique
  username   String?  @unique
  email      String?  @unique
  firstName  String?
  lastName   String?
  imageUrl   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Group           Group[] // the groups the user created
  UserGroup       UsersGroups[] // the groups the user is part of
  PersonalIncome  PersonalIncome[]
  PersonalExpense PersonalExpense[] // the personal expenses of the user 
  SharedExpense   SharedExpense[] // the expenses the user added to groups
  ExpenseSplit    ExpenseSplit[] // the expenses the user has to pay a part of
  Tag             Tag[] // the tags the user created
  Category        Category[]

  @@map("users")
}

model Group {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy     User            @relation(fields: [createdById], references: [id])
  createdById   String
  UserGroup     UsersGroups[]
  SharedExpense SharedExpense[]

  @@index([name])
  @@map("groups")
}

model UsersGroups {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
  @@map("users_groups")
}

model PersonalIncome {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  income   Income @relation(fields: [incomeId], references: [id])
  incomeId String @unique

  @@index([userId])
  @@map("personal_incomes")
}

model Income {
  id          String @id @default(cuid())
  description String
  amount      Int // amount in cents

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PersonalIncome PersonalIncome?
  IncomesTags    IncomesTags[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@index([description])
  @@index([createdAt])
  @@map("incomes")
}

model PersonalExpense {
  id String @id @default(cuid())

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  expense   Expense @relation(fields: [expenseId], references: [id])
  expenseId String  @unique

  @@index([userId])
  @@index([expenseId])
  @@map("personal_expenses")
}

model SharedExpense {
  id String @id @default(cuid())

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  expense   Expense @relation(fields: [expenseId], references: [id])
  expenseId String  @unique

  ExpenseSplit ExpenseSplit[]

  @@index([createdById])
  @@index([groupId])
  @@map("shared_expenses")
}

model Expense {
  id          String   @id @default(cuid())
  description String
  amount      Int // amount in cents
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  PersonalExpense PersonalExpense?
  SharedExpense   SharedExpense?

  ExpensesTags ExpensesTags[]
  category     Category?      @relation(fields: [categoryId], references: [id])
  categoryId   String?

  @@index([description])
  @@index([createdAt])
  @@map("expenses")
}

model ExpenseSplit {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  amount          Int // amount in cents
  SharedExpense   SharedExpense? @relation(fields: [sharedExpenseId], references: [id])
  sharedExpenseId String?

  @@unique([sharedExpenseId, userId])
  @@index([sharedExpenseId])
  @@index([userId])
  @@index([createdAt])
  @@map("expense_splits")
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  ExpenseTags ExpensesTags[]
  IncomesTags IncomesTags[]

  @@unique([createdById, name])
  @@index([name])
  @@index([createdById])
  @@map("tags")
}

model ExpensesTags {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expense   Expense @relation(fields: [expenseId], references: [id])
  expenseId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  @@unique([expenseId, tagId])
  @@map("expenses_tags")
}

model IncomesTags {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  income   Income @relation(fields: [incomeId], references: [id])
  incomeId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  @@unique([incomeId, tagId])
  @@map("incomes_tags")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  Income  Income[]
  Expense Expense[]

  @@unique([createdById, name])
  @@index([createdById])
  @@index([name])
  @@map("categories")
}
